===========================
Thursday, December 17, 2015
===========================

About configuring plugin attributes
===================================

I was wondering why the following code does not have the expected
result (of setting :attr:`start_year <lino_xl.lib.ledger.Plugin.start_year>`
to 2014)::

    import datetime
    from lino_cosi.projects.apc.settings import *

    class Site(Site):
        ...

    SITE = Site(globals())
    SITE.plugins.ledger.configure(start_year=2014)
    
while this code worked::

    import datetime
    from lino_cosi.projects.apc.settings import *

    class Site(Site):
        ...

        def setup_plugins(self):
            super(Site, self).setup_plugins()
            self.plugins.ledger.configure(start_year=2014)

    SITE = Site(globals())

The explanation was **not** that the settings module would be getting
imported twice (Ned Batchelder complained about this in `2011
<http://nedbatchelder.com/blog/201112/duplicitous_django_settings.html>`_,
`django-extensions
<https://github.com/django-extensions/django-extensions/issues/712>`_
had an issue with it in August 2015, blueyed on pytest reported an
issue in `Januay 2015
<https://github.com/pytest-dev/pytest-django/issues/75>`_).

The explanation was that :mod:`lino_cosi.projects.apc.settings.memory`
instantiated the :class:`Site` a second time. It did::

    from .demo import *

    class Site(Site):
        verbose_name = Site.verbose_name + " (:memory:)"

    SITE = Site(globals())

    DATABASES['default']['NAME'] = ':memory:'

There are a few things to learn here:

- we can indeed never guarantee that our :setting:`SITE` instance is
  actually being used. A solcal system admin can always decide to
  import our :xfile:`settings.py` module and the reinstantiate our
  Site class. That's part of our game with
  :class:`lino.core.site.Site` and should not be forbidden.

- I changed :mod:`lino_cosi.projects.apc.settings.memory` (and a first
  series of similar files) so that it no longer reinstantiates the
  :setting:`SITE`.  Because that's not necessary.
  A typical `memory.py` module in a `settings`
  package should have this content::

    from .demo import *
    SITE.verbose_name = SITE.verbose_name + " (:memory:)"
    DATABASES['default']['NAME'] = ':memory:'


A simple sales workflow with payment
====================================

I continued on :ticket:`671`, which is an important preparation for
:ticket:`143`.

There was still a bug in a tricky part: the :meth:`get_row_by_pk`
method of :class:`lino_xl.lib.ledger.ui.ExpectedMovements`. This
part is tricky and hackerish because we need to re-create the volatile
:class:`DueMovement<lino_xl.lib.ledger.utils.DueMovement>` objects
for each selected row.

TODO: unregistering a BankStatement which had cleared an invoice does
not yet restore the correct `satisfied` for the (now again
unsatisfied) invoice.
