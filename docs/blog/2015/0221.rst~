===========================
Saturday, February 21, 2015
===========================



.. currentmodule:: lino.modlib.contenttypes.models

235 stale controllables

In :mod:`lino.modlib.contenttypes`, I changed ``StaleControllables``
to :class:`StaleGenericRelateds` and ``StaleControllablesByModel`` to
:class:`StaleGenericRelatedByModel`. They no longer detect only stale
`owner` fields of :class:`Controllable` rows but any stale
GenericForeignKey field in the database.

Added a new test module for testing this table:
:mod:`test_stale_gfk <lino_welfare.projects.eupen.tests.test_stale_gfk>`.

Which made me discover that when I delete an object, Django *does*
automatically delete as well any objects which have a
GenericForeignKey pointing at it. Already in `1.6
<https://docs.djangoproject.com/en/1.6/ref/contrib/contenttypes/>`.
So theoretically I can remove my custom :meth:`Model.delete
<lino.core.model.Model.unused_delete>` method which did exactly that.

I have been reinventing the wheel once more.  And I am going to adapt
Lino to Django.  Yes (sigh!), that's the disadvantage of being a poor
lonesome codeboy.

One problem is that in Lino you can configure the cascading behaviour
using the :attr:`allow_stale_generic_foreignkey
<lino.core.model.Model.allow_stale_generic_foreignkey>`.  Okay, in
Django you can write a pre_delete signal.

inform the user 


Another problem is that in Django this automatism happens only if the
object being deleted has a `GenericRelation
<https://docs.djangoproject.com/en/1.7/ref/contrib/contenttypes/#django.contrib.contenttypes.fields.GenericRelation>`_
field.


Although this statement seems to be wrong: 
it happens also in
my projects which do *not* use any `GenericRelation`.

:mod:`test_stale_gfk <lino_welfare.projects.eupen.tests.test_stale_gfk>`


http://stackoverflow.com/questions/6803018/why-wont-my-genericforeignkey-cascade-when-deleting


Which means that :class:`Change <lino.modlib.changes.models.Change>`
objects are currently *not* preserved if their `master` or `object`
pointer becomes stale. 
See :ticket:`30` (Keep change records when partner gets deleted).
I must probably write a signal handler for
`pre_delete`. A minor problem, though.  `Clear nullable foreign keys
on delete <https://djangosnippets.org/snippets/1231/>`

And then all this raises the question: How then did these stale
generic pointers get into the database in Eupen?  Okay, I can imagine
that if some bug in some user code raises an exception at the right
(i.e. the wrong) moment.

And last but not least: how then can I artificially produce some stale
GenericRelated objects for testing purposes?
