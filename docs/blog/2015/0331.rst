=================================
20150331 (Tuesday, 31 March 2015)
=================================

A calendar navigator for my blog
================================

I spent two hours with optimizing :mod:`atelier.sphinxconf.blog`.  My
blog now features an automatic calendar navigator. I just wanted to
move the old years to a less visible place without loosing them from
the global toctree.  This blogging system contains blog entries since
2009 (though the first years were originally written in other formats
and are not yet fully converted)


Repairing data using a script
=============================

Yesterday we decided to write and run a rather simple but critical
batch operation in a production database.

Here is the script shortly before I actually ran it:

.. literalinclude:: 0331.py

I discovered that the `puts` of `clint
<https://pypi.python.org/pypi/clint/>`_ does not like unicode
strings. What a pity! I also saw that `they know it
<https://github.com/kennethreitz/clint/issues/48>`_.

I wrote documentation for :class:`PseudoRequest
<lino.core.utils.PseudoRequest>` and moved it from :mod:`lino.api.dd`
to :mod:`lino.core.utils`.

Miscellaneous
=============

I updated some parts of the Lino documentation.

About plugin inheritance
========================

The new module :mod:`lino_welfare.modlib.countries` is because I
converted the usage of :meth:`set_detail_layout
<lino.core.actors.Actor.set_detail_layout>` and of the magic
`site_setup` function which were in :mod:`lino_welfare.models`.

My plan is to declare this usage pattern as deprecated, but the topic
needs more investigation and documentation.

I also tried to solve the problem that a plugin, when it inherits from
an existing plugin, must create a wrapper for everything in its
parent's `fixtures` and `config` directories.  That problem is
described in :doc:`/dev/plugin_inheritance`.  My idea was to add
`fixtures` directories of parent plugins to Django's
:setting:`FIXTURE_DIR` setting. I even got this wo work, but then
discovered that it is useless because it changes the order in which
the fixtures are being loaded: Django's loaddata command first loads
all fixtures of :setting:`INSTALLED_APPS`, and only then those from
:setting:`FIXTURE_DIR`. No, I think we must continue to live with these
fixture wrappers.

