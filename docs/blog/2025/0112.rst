:date: 2025-01-12

========================
Sunday, January 12, 2025
========================

Thoughts about detail links
===========================

Imagine you are building the dashboard for user X in a Lino Noi. You render the
table of recent comments. At some moment you are there, with an instance of
:class:`comments.Comment` and want to render a link to the
:class:`comments.Comment.owner` of this comment. You call :meth:`ar.obj2html`,
which calls :meth:`Model.as_str` to build the displayed text and :meth:`obj2url`
to get the URL. Let's talk about that URL.
It uses the "default table".
:meth:`Model.get_default_table`


The ↗ of the phantom row should open an insert window

A different thing is when a row disappears from the list because of the end
user's change. For example, you are in the list of "Active tickets", showing the
detail view of one active ticket, and then you click on "Closed". Lino currently
gives you a "bad request" warning in this case,, which is wrong. The correct
behaviour here should be to skip to the next row, maybe with a warning "Ticket X
is no longer in Active tickets after your change" (although there are situations
where even this warning should get suppressed). If Lino cannot skip to the next
row (because you were on the last one), it should skip back to the previous row.


e-Invoicing
===========

Synodalsoft are not going to become a PEPPOL Access Point, but here is another
approach: I can become partner with Ibanity. I pay them a yearly fee of 2400€
and for this I can give access to up to 200 customers. It's not for free, but
it's a reasonable price.

- I opened an account on their `developer portal
  <https://developer.ibanity.com>`__. This is where we will create credentials
  for our customers.

- They do not provide a web interface where my customers can manage their
  invoices. We must implement this access in TIM. The TIM of my customers will
  connect to Ibanity using the credentials they get from me, and TIM must handle
  all events of the PEPPOL network: receiving invoices, sending invoices,
  verifying whether a business partner exists, ...

- Before paying 2400€, we want to write and test how our software will access
  their API.

- `API Reference <https://documentation.ibanity.com>`__

- The `Ibanity Python Library <https://github.com/ibanity/ibanity-python>`__
  provides wrappers around the Ibanity API. The object attributes are
  dynamically defined based on the API response, supporting minor API changes
  seamlessly.
