:date: 2025-04-02

====================================
Python 3.13 breaks sending of emails
====================================

Wednesday, April 2, 2025

TIM has a single field ``PAR->email`` with the customer's email addresses. And
TIM users know that they can put multiple email addresses into this field if
they separate them by a semicolon. A semicolon?!  According to `RFC 5322
<https://www.rfc-editor.org/rfc/rfc5322#section-3.6.3>`__ the correct delimiter
for recipients in the ``To:`` header is the **comma**, not a semicolon. Yes, but
a semicolon works as well.  Or at least it *used* to work as well. But some time
ago (I guess in version 3.2) the Python email module has been modernized and no
longer accepts strange values in the ``To:`` header.

TIM uses the :xfile:`sendmail.py` script to actually send the emails.

>>> import email
>>> from email.utils import getaddresses

Here is an example of an email generated by TIM (the :xfile:`sendmail.py` script
reads this from a file and cares about the special cp850 encoding, but we can
simplify this here):

>>> TEMPLATE = """From: foo@example.be
... To: {recipient}
... Subject: Rechnung
...
... Sehr geehrter Kunde,
... anbei unsere Rechnung mit Gesamtbetrag 407,90
... """

And here is a function to test how :xfile:`sendmail.py` parses the recipients
from the ``To:`` header:

>>> def test(to):
...     msg = email.message_from_string(TEMPLATE.format(recipient=to))
...     return getaddresses(msg.get_all('to'))

And yes, semicolons aren't okay while commas are okay:

>>> test("bar@example.be;baz@example.be")
[('', '')]

>>> test("bar@example.be,baz@example.be")
[('', 'bar@example.be'), ('', 'baz@example.be')]

Until some time ago, the first example would also have returned a list of parser
addresses.  And now poof, more than a hundred customers of my customer didn't
get their invoice.  Because two weeks ago my customer had inadvertently deleted
the Python from their PC, and I had reinstalled it. The new version is 3.13 and
I think that the old one was 3.10 but I'm not sure.

And I didn't find a way to restore the old behaviour. The ``compat32`` policy
*should* do it (according to the docs) but doesn't:

>>> from email.policy import compat32
>>> s = TEMPLATE.format(recipient="bar@example.be;baz@example.be")
>>> msg = email.message_from_string(s, policy=compat32)
>>> getaddresses(msg.get_all('to', []))
[('', '')]

I could customize the `header_factory
<https://docs.python.org/3/library/email.policy.html#email.policy.EmailPolicy.header_factory>`__,
but I'm afraid that this might change in the future.

So I'll rather ask the TIM user to replace their semicolons by commas.

More precisely I wrote a TIM script for them::

  // activate from command line using "tim /exec:actexec('parscan')"
  DlgDefine("b",{||(PAR->email:=strtran(PAR->email,";",","))!=NIL})
  Confirm(MsgSure())
  DbfScan({oPar()},1,NIL,NIL,NIL,{||TryRecLock(DlgValue('b'))})
  SetMsg(MsgDone())



More tests:

>>> getaddresses(["foo@example.com; bar@example.org"])
[('', '')]

>>> getaddresses(["foo@example.com; bar@example.org"], strict=False)
[('', 'foo@example.com'), ('', ''), ('', 'bar@example.org')]

>>> import sys
>>> sys.version
'3.12.3 (main, Feb  4 2025, 14:48:35) [GCC 13.3.0]'
