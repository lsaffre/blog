:date: 2016-05-24

=====================
Tuesday, May 24, 2016
=====================

I continued on :ticket:`897`.

I renamed ``lino_presto.projects.daniel`` to
:mod:`lino_presto.projects.psico`.  IOW we have now :ref:`psico`
(which is a variant of :ref:`presto`). Because "Lino Presto à la
Daniel" was just too silly as a name for a software product.

More plugin inheritance subtilities
===================================

Compare also :doc:`0205`.

I discovered yet another edge case where
:meth:`lino.core.site.Site.is_abstract_model` plugin inheritance
didn't work as expected. Consider the following 3 versions of the
``clocking`` plugin:

#.  :mod:`lino_noi.lib.clocking`

#.  :mod:`lino_noi.projects.team.lib.clocking`

#.  :mod:`lino_presto.lib.clocking` (whose name should be
    :mod:`lino_presto.projects.psico.lib.clocking` because it is
    psicospecific)

When building the docs for :ref:`presto`, we have
:mod:`lino_presto.projects.std.settings.doctests` active. Which
installs :mod:`lino_noi.lib.clocking`. So #3 is never imported. But
then autodoc nevertheless imports it for inspection. And Django then
gets mad and says:

    RuntimeError: Conflicting 'session' models in application
    'clocking': <class 'lino_noi.lib.clocking.models.Session'> and
    <class 'lino_presto.lib.clocking.models.Session'>.


I added a new internal Site instance
attribute :attr:`installed_plugin_modules
<lino.core.site.Site.installed_plugin_modules>` to avoid this.


Very similar to :doc:`0205`, we now have:

#.  :mod:`lino_presto.projects.psico.lib.contacts` inherits from
#.  :mod:`lino_presto.lib.contacts` which inherits from
#.  :mod:`lino.modlib.contacts`

The problem then is that the `contacts` plugin defines several models
(Partner, Person, Company, ...)

#.  :mod:`lino_presto.projects.psico.lib.contacts` overrides `Partner`
#.  :mod:`lino_presto.lib.contacts` overrides `Partner`, `Person` and
    `Company`
#.  :mod:`lino.modlib.contacts`

I rewrote the internal mechanism for :meth:`is_abstract_model
<lino.core.site.Site.is_abstract_model>` almost completely, and I
think that the :doc:`0205` problem is now solved as well.


Managing user profiles
======================

Mathieu asked an interesting question (:ticket:`937`):

    Mes collègues de la médiation de dettes sont intéressées par le module
    :mod:`lino_welfare.modlib.debts`. Peux-tu donner accès à celui-ci au
    profil 120 (Agent d'insertion (nouveaux bénéficiaires)) ?

There are two ways to solve this.
You'll probably need look at the source code of
:mod:`lino_welfare.modlib.welfare.roles` in order to follow.

We have already :class:`ReceptionClerk
<lino_welfare.modlib.welfare.roles.ReceptionClerk>`,
:class:`ReceptionClerkNewcomers
<lino_welfare.modlib.welfare.roles.ReceptionClerkNewcomers>` and
:class:`IntegrationAgentNewcomers
<lino_welfare.modlib.welfare.roles.IntegrationAgentNewcomers>`.  The
profile "120 Integration agent (Newcomers)" corresponds the latter.
There is also the
:class:`DebtsUser<lino_welfare.modlib.debts.roles.DebtsUser>` role,
which is currently used only for the user profile "300 Debts consultant".

To fix Mathieu's problem, I just need to change
:class:`IntegrationAgentNewcomers
<lino_welfare.modlib.welfare.roles.IntegrationAgentNewcomers>`,
telling it to inherit also from :class:`DebtsUser
<lino_welfare.modlib.debts.roles.DebtsUser>`. Voilà.  En passant I
noted that one docstring was erroneous.

Note the difference between a user *profile* and a user *role*. A role
is just a class object used to specify a set of permissions to grant.
A user profile has exactly one role. A user profile has, in addition
to the role, a few more attributes (like `hidden_languages`,
`readonly`) which are relevant when generating Javascript library.

We might be tempted to change Lino and say that a profile can have
several roles. The advantage of this would be that we wouldn't need to
create classes like :class:`ReceptionClerkNewcomers
<lino_welfare.modlib.welfare.roles.ReceptionClerkNewcomers>` and
:class:`IntegrationAgentNewcomers
<lino_welfare.modlib.welfare.roles.IntegrationAgentNewcomers>` because
these are just a combination of some other existing roles.  But that's
just a temptation. Actually it is not bad at all to force us to write
a class for every possible combination of user permissions.



Alexa reported :ticket:`938`. This was (probably) a bug in
:xfile:`courses/Course/presence_sheet.weasy.html`.

En passant I changed :attr:`slave_grid_format
<lino.core.tables.AbstractTable.slave_grid_format>` for
:class:`EnrolmentsByCourse
<lino_xl.lib.courses.ui.EnrolmentsByCourse>` so that it shows the
slave table panel in plain html (not editable). Newbie users were
confused because this table looked looked almost the same whether as
slave panel or opened in own window.


Upgrade for :ref:`eiche`
========================

Änderungen:

- Die Panels für "Termine" und für "Einschreibungen" im Detail-Fenster
  eines Kurses sind jetzt nicht mehr bearbeitbare Tabellen. Um darin
  zu arbeiten, muss man das Panel im eigenen Fenster öffnen.
- Anwesenheitsblatt zeigte auch Teilnehmer an, die auch nach der
  Periode anfingen.


OptionParser usage for django-admin commands is deprecated
===============================================================

When restoring a Python dump, I get the following warning:

    WARNING:py.warnings:a/restore.py:656: RemovedInDjango110Warning:
    OptionParser usage for django-admin commands is deprecated, use
    ArgumentParser instead



Lino not sending emails
=======================

Oops, here is an example which shows that I am not a very good system
administrator.  One production site did not send any emails any
more. The end-users complained about this yesterday.  The reason was
that I made them an upgrade on 28 January and forgot to define a
:envvar:`LINO_SITE_MODULE` environment variable. Which was necessary
after :doc:`0109`. Their site module not only defined the SMTP
settings but also e.g. :setting:`LOGGING`. They have been running
almost four month without a Lino log and without getting any emails
from Lino.
