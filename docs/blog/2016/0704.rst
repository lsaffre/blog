:date: 2016-07-04

====================
Monday, July 4, 2016
====================

About time zones
================

During this weekend I worked on :ticket:`807`.  The only problem was
that :manage:`dump2py` serialized the values of `DateTimeField` as
follows::

    if isinstance(field, models.DateTimeField):
        d = value
        return 'dt(%d,%d,%d,%d,%d,%d)' % (
            d.year, d.month, d.day, d.hour, d.minute, d.second)

And at the beginning of the file wrote::

    from datetime import datetime as dt

Now it just writes a different definition at the beginning::

    from datetime import datetime
    from django.utils.timezone import make_aware
    def dt(*args):
        return make_aware(datetime(*args))
    
This should work in all "normal" circumstances.

But what will it do when e.g. we make a dump, then change
:setting:`USE_TZ` and/or :setting:`TIME_ZONE`, then re-read the dump?
In these cases it is possible that we need to manually change that
definition of the :func:`dt` function in our :xfile:`restore.py` file.

After reading the Django docs about `Time zones
<https://docs.djangoproject.com/en/1.9/topics/i18n/timezones/#migration-guide>`_
it seems to me that the best configuration for our own :ref:`noi`
production site is to set :setting:`USE_TZ` to `True`
and :setting:`TIME_ZONE` to `'UTC'`.
But the latter is ``'Europe/Tallinn'`` right now.

Testing dumps
=============

Ticket :ticket:`807` looks trivial, but this is an area where dragons
live. And because I want to avoid any risk, I wrote a new tested spec
:ref:`book.specs.dumps`.

For this I invented the new testing utility :mod:`atelier.sheller`.

A side effect: the :xfile:`restore.py` generated by :manage:`dump2py`,
until now, did no argument parsing, and it was not possible to run it
in batch mode, i.e. to prevent it from asking a user confirmation
before flushing the database. For above test case I needed it to have
a command-line argument :option:`--noinput`.  This is one reason why I
never wrote any tests about it so far. Now I added this option.

Which revealed that we have yet another problem: the :manage:`run`
command, after conversion to argparse (:ticket:`967`), did not accept
to call scripts that accept optional arguments . It took me some time
to find out that I just need to specify
``nagrs=argparse.REMAINDER``)

