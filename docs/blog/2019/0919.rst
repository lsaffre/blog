:date: 2019-09-19

============================
Thursday, September 19, 2019
============================

Miscellaneous
=============

I subtle change in the Lino core in order to optimize testing:
:meth:`lino.utils.diag.Analyzer.show_window_fields` no longer shows dummy
fields. Because it was irritating to see the
:attr:`lino_xl.lib.cv.LanguageKnowledge.entry_date` field appear in the doctests
for :ref:`welfare` where they don't want to have this field.

Version mismatch: this is the 'cffi' package version 1.12.3
===========================================================

Back to work on :ticket:`3095`, continued after :doc:`0918` where I stopped
here::

  [Wed Sep 18 15:37:21.750588 2019] [wsgi:error] [pid 3357:tid 140319710512896]
  Exception: Version mismatch: this is the 'cffi'
  package version 1.12.3, located in
  '/usr/local/lino/lino_local/prod/env/lib/python3.7/site-packages/cffi/api.py'.
  When we import the top-level '_cffi_backend' extension module, we get version
  1.12.2, located in
  '/usr/lib/python3/dist-packages/_cffi_backend.cpython-37m-x86_64-linux-gnu.so'.
  The two versions should be equal; check your installation.

Looks as if the cffi in the site's environment is finding the cffi of the
server-wide environment.

But the server-wide Python does not seem to have cffi installed::

  # python3
  Python 3.7.3 (default, Apr  3 2019, 05:39:12)
  [GCC 8.3.0] on linux
  Type "help", "copyright", "credits" or "license" for more information.
  >>> import cffi
  Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
  ModuleNotFoundError: No module named 'cffi'
  >>>

Why then does it have a file
:file:`_cffi_backend.cpython-37m-x86_64-linux-gnu.so`?

Why do I have that cffi package installed at all?  What does it do? Which module
requires it?

What is the difference between :file:`/usr/lib/python3/dist-packages` and
:file:`/usr/local/lib/python3/dist-packages`?

Ouch, I just read `here
<https://stackoverflow.com/questions/54234344/the-reason-cause-different-location-of-python-packages>`__
that "(note: do not use sudo pip, which can cause problems)." That's what I
currently instruct to do in :ref:`getlino.install.contrib`.

And also: :file:`/usr/lib` is for modules installed by the system with the
package manager (e.g. with :cmd:`sudo apt-get python-numpy`) while
:file:`/usr/local/lib` is for modules that you installed yourself system-wide
(e.g. with :cmd:`sudo pip install numpy`

After reading `this
<https://stackoverflow.com/questions/43325110/exception-version-mismatchcffi>`__,
I tried to install `python3-cffi` as a system package::

  $ sudo apt-get install python3-cffi
  ...
  The following NEW packages will be installed:
    python3-cffi python3-ply python3-pycparser
  ...

And whoops, the problem is gone!  But don't ask me why...

TODO: review :ref:`getlino.install` to not use "sudo pip3", e.g. by always using
a shared env which contains at least getlino.

Install eidreader handler on tups
=================================

I needed to install a custom url handler for `beid://` links, so I used the
documentation about :ref:`eidreader.install` and reviewed it en passant.


Run the migration script
========================

I ran the migration script prod2preview for weleup because I ow had an
operationdatabase error because LanguageKnowledge.use_certificate had not yet
been created. Nothing special.


Amici removes participants of my meeting
========================================

I started working on :ticket:`3210` (Amici removes participants of my meeting).

To reproduce the problem:

- :manage:`runserver` in :mod:`lino_amici.projects.herman` and sign in as robin.
- create calendar entry, leave it in draft mode
- enter a guest. Lino accepts it.
- Hit the Save button of the calendar entry. Poof the participant is gone!

This is because in other circumstances we want this behaviour: Lino should
automatically keep the list of participants synchronized with the "suggested
guests" for this meeting.  For example in :ref:`avanti` when we have a course
with participants (enrolments), and we have generated a series of calendar
entries having their suggested guests filled already, and now one participant
cancels their enrolment.  We want Lino to update all participants of meetings
that are still in draft state.  The issue is that Lino doesn't correctly
differentiate between those two situations:

- manually enter and manage the list of guests

- fill guests automatically and keep it synchronized with the guests suggested
  by the entry generator.

Lino should no longer let me manually create a guest when the event is in "fill
guests" mode.

.. currentmodule:: lino_xl.lib.cal

The :attr:`Event.update_guests` action is always called in the
:meth:`Event.after_ui_save` method.  That's okay, but in our case the action
obviously comes to the conclusion that we do want to update our guests. More
precisely the event state obviously has :attr:`EntryState.edit_guests` set to
False, and the entry type has :attr:`fill_presences` set to True.  The solution
is to simply set

- New method :meth:`Event.can_edit_guests_manually` which encapsulates this
  condition.
- That method is now also used to decide whether the presences lists can be
  modified manually.
- Changed "Edit participants" to "Fill guests" (in :class:`EntryStates`)
- Renamed :attr:`EntryState.edit_guests` to :attr:`EntryState.fill_guests`

- Changed the :attr:`EntryState.fill_guests` for :attr:`EntryStates.took_place` from True to
  False. Not sure whether this is good. To be observed.  Maybe this is application specific.

- Changed the default value for :attr:`EventType.fill_presences` from True to False.

  But :ref:`avanti` and :ref:`tera` set it back to `False` (as it has been until
  now) because the demo data relies on it.

- The :fixture:`demo2` fixture for :mod:`lino_xl.lib.cal` now uses all event
  types having is_appointment=True (no longer only those which also have
  fill_presences=True).


Note the difference between "guest" and "presence". The model name is currently
still :class:`cal.Guest`, but this should be renamed to :class:`cal.Presence`.
Because the "guest" is actually the field of a presence which points to the
person who is the guest.


======== =========== =========== ===========================
Name     transparent appointment fill guests
======== =========== =========== ===========================
Meetings no          yes         yes
Internal yes         yes         no
Absences no          yes         yes in presto, otherwise no
Holidays yes         no          no
======== =========== =========== ===========================

Note that the transparence is meant for the responsible user (e.g. in Tera and
Avanti). In Presto it should check for availability of the guests (who are
actually workers), but this is currently not a requirement.

appointment means that other people (external partners or colleagues) are
involved and should be informed about schedule changes.
