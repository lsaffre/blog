:date: 2017-07-28

=====================
Friday, July 28, 2017
=====================

Lino Tera continued
===================

Here is the new list of tasks for me after my meeting with Lydia
yesterday (:ticket:`1982`).

DONE:

- Pro Beleg haben wir jetzt das Buchungsdatum (entry_date), und ein
  eventuelles Belegdatum (voucher_date), das aber höchstens zur Info
  irgendwo im Hintergrund steht.
  
- Eine MWSt-Erklärung kann jetzt mehrere Monate auf einmal deklarieren.
 
- Buchungsperiode soll laut Buchungsdatum sein. Aber man muss
  Buchungsperiode manuell ändern können.

- Kleine Rechenfehler in gewissen Feldern der MWSt-Erklärung.

- Kontenbewegungen und Belege nach Buchungsperiode filtern können.
  
- Analytic Accounts Balance 2017 ist leer, obschon EKR existieren.
  
- Journal "Zahlungsaufträge" fehlte noch.
- Alle EKR waren im Q4 verbucht, das ist ist jetzt korrigiert.
- MWSt-Erklärung für Q1 funktioniert jetzt scheinbar
  
- Translations

TODO:

- Man kann Einschreibungen nicht bestätigen.
- Termin Familiengruppe machen und Anwesenheiten erfassen können.

- :ticket:`1975` (Daten im oberen Teil des Dokuments verschwinden wenn
  man registriert) ist jetzt reproduzierbar: Neue EKR erstellen. An
  Rumma. Im Betreff "test" eingeben. Nicht speichern, sondern sofort
  unten ein Konto 610211 eingeben, Betrag inkl. 123€, und dann
  Registrieren klicken. NB passiert nur, wenn es eine soeben erstellte
  EKR ist.
  
TODO after deployment:

  
  
LATER:

- Falls Buchungsperiode abgeschlossen ist, sollte Lino sie nicht mehr
  vorschlagen, sondern die erste offene BP danach nehmen.
  
- Data checker "Buchungsdatum und Buchungsperiode" (mit fix).
  
- Layout EKR noch zu optimieren. Zahlungsbedingung kann
  raus.

- Wenn ich Belegdatum ändere, sollte er Zahlungziel
  anpassen. (unwichtig, weil es im insert_layout machbar ist)
  
- Was passiert wenn jemand umzieht? Momentan ist es so, dass man auch
  beim Konsultieren einer alten Aktivität die neue Adresse sieht. Die
  alte Adresse könnte man sich bei Bedarf als Bemerkung reinschreiben.
  
- Und dann kommt natürlich die Frage, wie das alles fakturiert werden soll.





The :mod:`lino.mixins.periods` module defines model mixins and
parameter panels for handling date ranges::

  DatePeriod(Model) : start_date, end_date

  CombinedDateTime(Model) : set_datetime() and get_datetime()
  - Started(CombinedDateTime) : start_date, start_time
  - Ended(CombinedDateTime) : end_date, end_time
  
  ObservedPeriod(ParameterPanel) : start_date, end_date
  - Yearly(ObservedPeriod)
  - Monthly(ObservedPeriod)

  Today(ParameterPanel) : today
  
In :mod:`lino.utils.dates` we define :class:`DatePeriodValue` which is
a volatile version of :class:`DatePeriod`.  Now we need something
similar for accounting periods. Similar but simpler.

See also the :class:`PeriodEvents` choicelist and its choices in
:mod:`lino.modlib.system.choicelists`.

CHANGES:

- renamed :class:`DatePeriod` to
  :class:`lino.mixins.periods.DateRange` and :class:`DatePeriodValue` to
  :class:`lino.utils.dates.DateRangeValue`.
- renamed ObservedPeriod to :class:`ObservedDateRange
  <lino.mixins.periods.ObservedDateRange>`.
- New model mixins :class:`PeriodRange
  <lino_xl.lib.accounting.PeriodRange>` and :class:`PeriodRangeObservable
  <lino_xl.lib.accounting.PeriodRangeObservable>` in
  :mod:`lino_xl.lib.accounting` (:class:`PeriodRange
  <lino_xl.lib.accounting.PeriodRange>` is used by
  :class:`lino_xl.lib.vat.VatDeclaration` while
  :class:`PeriodRangeObservable
  <lino_xl.lib.accounting.PeriodRangeObservable>` is used by
  :class:`Movement <lino_xl.lib.accounting.Movement>` and
  :class:`Voucher <lino_xl.lib.accounting.Voucher>`).



Miscellaneous
=============

- ledger.Momements are now ordered by `id` because without any
  ordering it produced output in some test cases.

- :command:`inv mm` failed in Lino because babel stumbled when parsing
  :mod:`lino.sphinxcontrib.help_texts_extractor`.

- Translations for
  :class:`lino_xl.lib.beid.choicelists.ResidenceTypes` caused me some
  surf time
