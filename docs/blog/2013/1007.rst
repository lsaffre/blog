==================================
20131007 (Monday, 07 October 2013)
==================================

Issuing payment reminders
-------------------------

Continued on :ref:`faggio`: Lino can now issue payment reminders.
In its simplest form (just a reminder, without automatically computing 
a severeness and/or interests to add) the user simply creates 
a Note of type "Payment Reminder" and prints it or sends it via email.
I like the straightforwardness and transparence of this implementation
which will be part of :ref:`cosi`.

Added an :attr:`insert_layout <lino.core.actors.Actor.insert_layout>` to 
:class:`notes.NoteTypes <lino.modlib.notes.models.NoteTypes>`.

Added 
:class:`notes.NotesByPerson <lino.modlib.notes.models.NotesByPerson>`
and 
:class:`notes.NotesByCompany <lino.modlib.notes.models.NotesByCompany>`.


New files
:srcref:`Letter.odt <lino/modlib/notes/config/notes/Note/Letter.odt>`
and
:srcref:`payment_reminder.body.html 
<lino/modlib/finan/config/notes/Note/payment_reminder.body.html>`.
A payment reminder 
uses the :class:`ledger.DuePaymentsByPartner 
<lino.modlib.ledger.models.DuePaymentsByPartner>`
table with the Note's
:meth:`partner <lino.modlib.contacts.models.ContactRelated.get_partner>` 
property as `master_instance`.

:mod:`lino.modlib.ledger.fixtures.mini` 
now adds a NoteType "Payment reminder".


Should `ar.show()` call :meth:`E.tostring` or not? 
Answer: it depends. 
Yes when called from inside a "do text from" of an appy.pod template, 
No when called from inside a plain html template.

- :meth:`lino.core.requests.BaseRequest.show`
- :meth:`lino.ui.render.HtmlRenderer.show_request`
- :meth:`lino.ui.render.TextRenderer.show_request`
- :meth:`lino.extjs.ext_renderer.ExtRenderer.show_request`
- :meth:`lino.core.actors.Actor.show`



Cannot choose template or body_template of a PrintableType
----------------------------------------------------------

When trying to choose a template or body_template of a PrintableType,
the selection list is always empty and the server reports a 
TypeError
"unbound method get_templates_group() must be called with 
NoteType instance as first argument (got nothing instead)".

This bug had been introduced when I made `ledger.Journal` 
a `PrintableType`. 
Fixing this bug revealed two other bugs:

- Lino didn't yet support specifying a 
  :class:`ChoiceListField <lino.core.choicelists.ChoiceListField>`
  as parameter of a 
  :class:`Chooser <lino.utils.choosers.Chooser>`.
  Fixed.
  Added :class:`lino.utils.instantiator.ChoiceConverter`.

- Until now it was not possible to select per Journal another template 
  than `Default.odt` for printing an invoice.
  Fixed.


Released Lino-Welfare 1.1.10
--------------------------------------------


Release notes see :ref:`welfare.changes`.
This also required a new version (:ref:`1.6.13 <lino.changes>`) of Lino.

:cmd:`fab sdist_test` still failed with an 
ImportError "Could not import settings 'lino.projects.belref.settings' 
(Is it on sys.path?): No module named lino_welfare.modlib.statbel"

:cmd:`fab sdist_test` no longer asks for a user confirmation before 
deleting the temporary directory.

Renamed the fab command `upload` to :cmd:`fab release`.

Upgrading to a relased version is now really easy:
  
  $ . env/bin/activate  
  $ python manage.py dump2py /var/log/lino/backups/20131007
  $ pip install -U lino-welfare
  $ python manage.py run /var/log/lino/backups/20131007

Oops, except if you get e.g. the following::

  IOError: [Errno 28] No space left on device

which means that you must either tidy up or install a bigger hard drive.

