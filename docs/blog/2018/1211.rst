:date: 2018-12-11

==========================
Tuesday, December 11, 2018
==========================


Why we do Lino
==============

:ticket:`2578` (Lino versus Tryton)

When I look at our new collaboration directives and how much work I invested
into these things during the last months, I cannot refrain from asking: why am
I doing this work?  Why don't we join the Tryton community and give up Lino?
Tryton is so similar to Lino (at least for deciders). Both in Python, both Free.
Am I re-inventing the wheel?

Yesterday I was on a local village meeting. They talked about a seminar on
project management they had last year (I missed that one). One participant said
"The only interesting thing I learned was the rule "Give 20% to the *how* and
80% to the *why*!" I have invested 2 months into *how* Lino will continue to
live, and my only answer (so far) to the potential question *Why* is "my
feeling said, 5 years ago, that Lino is a bit better than Tryton"...

I asked this  question already several years ago and at that moment my
conclusion was:  in order to answer this question, somebody would need to write
a Tryton application which has a chance to become a replacement for one of the
existing production Lino applications. And I am probably not the right person
to do this test because I might not be neutral. But I could ask Hamza or Tonis
to do it: `Get started with Tryton
<https://tryton-documentation.readthedocs.io>`__ and try to write a Lino Noi.
And then give us some serious reasons for Lino to exist next to Tryton.

I read a 3 year old discussion `Tryton vs Odoo
<https://groups.google.com/forum/m/#!topic/tryton/IOOKXaurMCs>`__ on the now
readonly tryton mailing list.  It explains why Odoo is not even a candidate
because it is not free.



Build failing because of make_demo_picture
==========================================

:ticket:`2741`.

https://travis-ci.org/lino-framework/book/jobs/466186410

Yes, the :meth:`lino_xl.lib.beid.BeIdCardHolder.make_demo_picture` method is a
strange thing.  We have it because the welfare test suite requires some
examples in the demo database that simulate clients having their Belgian eID
card read into Lino.  So these clients need a "real" picture.  To simulate a
"real" picture read from an eid card we have these files :file:`luc.jpg` and
:file:`ly.jpg`.  These need to be copied to the (local) directory for pictures
uploaded from id cards. :meth:`get_image_path
<lino_xl.lib.beid.BeIdCardHolder.get_image_path>`

So the problem has to do with the :attr:`include_package_data` option. Maybe
simply remove the ``zip_safe=False``.

And ta-daa, only yesterday I thought that :mod:`lino` and :mod:`lino_xl` can
have a common set of release notes, and already now we have a case that proves
my assumption as wrong: we need a new PyPI version for XL but not for Lino.

We can either

- do an artificial release 18.12.0 (without any change) for Lino as well
- start maintaining separate release notes for Lino and XL
- decide that we don't yet want release notes for XL and restore the -e option
  for lino_xl in the book requirements

Since I don't yet know the answer to above questions, for now I did a PyPI
release for XL 18.12.0 without mentioning it in the release notes. And then
restarted the book build on Travis.  Let's see what it does before talking
more.

The problem remains, so removing the ``zip_safe=False`` was not enough.
