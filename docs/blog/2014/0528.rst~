=======================
Wednesday, May 28, 2014
=======================

Another contribution
--------------------

Joe sent two pull requestst for :mod:`export_excel
<lino.modlib.export_excel>` and :mod:`print_pisa
<lino.modlib.print_pisa>`.  Thank you, Joe.  I still did not find time
to have a closer look at them.  :mod:`export_excel
<lino.modlib.export_excel>` would probably be of immediate benefit.


Thoughts about versioning and release process
---------------------------------------------

Yesterday I made an upgrade on a :ref:`welfare` production server,
including data migration.  So before doing "anything else" I should
bump certain version numbers and tag the repositories.

- :ref:`welfare` needs a new version number (must change from version
  1.1.12 to 1.1.13) because North database migration works using the
  application's version number.  (Which by the way is an important
  difference with South or the coming Django migration system, who use
  an individual "version" counters for every app.)

- :ref:`lino`, :ref:`north` and :ref:`site` need a new version number
  because they might have influence on the :ref:`welfare` database
  structure, and thus :ref:`welfare` needs to be able to specify "I
  want *this* version of lino, of north and/or of djangosite".


- The "anything else" above is not absolute.  We are talking about
  changes in trunk/master of :mod:`djangosite`, :mod:`north`,
  :mod:`lino` and :mod:`lino_welfare` itself.  But for example
  :ref:`atelier`, :ref:`davlink` and :ref:`eidreader` are special
  because they have no influence on the database.

- Changing the version number is itself easy thanks to :ref:`atelier`:
  I just need to change the :xfile:`project_info.py` file, which
  currently contains::

    SETUP_INFO = dict(
        name='lino-welfare',
        version='1.1.12',  # not yet released
        install_requires=['lino', 'suds', 'vobject', 'django-iban'],

But before actually doing this, I must "release" the current versions.

In fact I don't need to release them officially on PyPI right now. As
long as nobody asks for a new released version, I can save time by
skipping this step. But I must be ready to do it retroactively some
day in the future.

So I should tag the current state of the involved repositories.  To
get back into this, I needed to read the Git docs about `Tagging
<http://git-scm.com/book/en/Git-Basics-Tagging>`_

The author of `Git Tag Does the Wrong Thing by Default
<http://www.rockstarprogrammer.org/post/2008/oct/16/git-tag-does-wrong-thing-default/>`_
claims that I should not use lightweight tags.  And `Why should I care
about lightweight vs. annotated tags?
<http://stackoverflow.com/questions/4971746/why-should-i-care-about-lightweight-vs-annotated-tags>`_
explains it more in detail.

So I should now make an annotated tag on each project::

  $ go site
  $ git tag -a v0.1.8 -m v0.1.8
  $ git push origin v0.1.8

  $ go north
  $ git tag -a v0.1.7 -m v0.1.7
  $ git push origin v0.1.7

  $ go lino
  $ git tag -a v1.6.13 -m v1.6.13
  $ git push origin v1.6.13

  $ go welfare
  $ git tag -a v1.1.12 -m v1.1.12
  $ git push origin v1.1.12




