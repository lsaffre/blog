:date: 2021-02-17

============================
Wednesday, February 17, 2021
============================

I had an avalanche of ideas about what's to do next.

Note: This is a situation where it's more efficient to write a :term:`developer
blog` entry. Otherwise I started to use our commenting system (:ref:`noi`) more
intensively. Because a reporting-what-you-do approach based on comments in a
database (rather than daily blog entries) is more suitable whenever you are not
alone.

Here is an overview of the ideas (all except the first are just ideas ATM):

- :mod:`lino.modlib.uploads` :
  Add a field :attr:`file_size`. Add a view where files are sorted by size.
  Move the Uploadable mixin to the uploads plugin because it is used only there.
  Add a :class:`UploadChecker`, which verifies that the file still exists and the size matches.
  Report files under uploads root that do not have an `Upload` entry.
  I started working on this as :ticket:`3982`.

- A future :mod:`lino_xl.lib.gallery` plugin would depend on :mod:`uploads` and
  add views to manage and uploads that are considered as pictures.  But what is
  a picture?  What about the existing :attr:`Upload.mimetype` field? Can we use
  this? Or do we need a an additional choicelist :class:`uploads.FileTypes` and
  set :attr:`file_type.is_image` to True for pictures?

- :mod:`lino.modlib.comments` : Review the demo comments to make them more
  convincing. Use a :class:`CommentingAreas` choicelist instead of a generic
  foreign key. Add commenting to :ref:`cosi`.

- :mod:`lino.modlib.changes`: Add a config parameter to say that we want to
  forget changes that are older than a number of days. Add a method
  :meth:`Change.get_as_comment` that returns `self` formatted as a comment.

Intermediate research:

Can we use Django's built-in `size
<https://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.fields.files.FieldFile.size>`__
attribute of a `FieldFile` object for sorting all Uploads by their size? No,
because a `FieldFile` is just a volatile object created on the fly, and its
:attr:`size` property works by calling :func:`os.path.getsize` (at least when
the uses the default file storage and unless it has been asked before doring the
same request).
:func:`os.path.getsize` returns the file size in bytes.

Oops, I discovered that the insert window of an upload doesn't close after
having uploaded. The JS console says "Uncaught TypeError: action.result is
undefined". The end user sees no error message and the window simply remains
open. So the user is tempted click a second time on the submit button. And every
click will upload the file again. So we definitively need the UploadChecker to
find duplicate and unused files.

Ha! There was a typo bug in :class:`renderer_mixin.JsCacheRenderer` which caused Lino to
create an empty media directory "upload" (instead of "uploads") at startup. This
bug might be the cause for missing group write permission of files that were
uploaded to a production site.  If you encounter this problem, check whether
your :xfile:`uploads` directory has the sticky group bit set.


Here the actual code changes in :mod:`lino.modlib.uploads`:

.. currentmodule:: lino.modlib.uploads

- Moved the :class:`Upgradable` mixin from :mod:`lino.mixins` to
  :class:`UploadBase`. And the `upload_to
  <https://docs.djangoproject.com/en/5.0/ref/models/fields/#django.db.models.FileField.upload_to>`__
  value of :attr:`Upload.file` is no longer hard-coded but
  configurable via the new :attr:`Plugin.upload_to_spec` setting.

- Added a new plugin parameter :attr:`Plugin.max_file_size`

- The :meth:`Model.save_new_instance` method now calls  :meth:`full_clean` on
  the new instance before anything else. This is now important because an
  :term:`upload file` might be invalid due to its size.

- In :mod:`lino_book.projects.min9` I converted the settings package into a single
  :xfile:`settings.py` module.

Some side effects on documentation and test suites:

A first side effect was that I removed the docs and max demo projects. These two
project had become useless ballast.  Most of the :term:`tested documents <tested
document>` that relied on them can use :mod:`lino_book.projects.min2` or
:mod:`lino_book.projects.min9` as well. But I had to add some more plugins to
min9. I created ticket :ticket:`3984` for this.

As a side effect of this side effect, the API generated by autodoc no longer
includes the :xfile:`models.py` files of the some plugins. This is a first step
towards converting their docs to prose style (:ticket:`1869`). Next step will be
to create a specs page for each of them and to move the docstrings from the
:xfile:`models.py` there. The plugins are :mod:`lino_xl.lib.votes`
:mod:`lino_xl.lib.skills` :mod:`lino_xl.lib.postings` :mod:`lino_xl.lib.outbox`
:mod:`lino_xl.lib.online.users` :mod:`lino_voga.lib.invoicing`
:mod:`lino_noi.lib.users` :mod:`lino_noi.lib.topics` :mod:`lino_noi.lib.tickets`
:mod:`lino_noi.lib.contacts` and :mod:`lino_noi.lib.cal`.

And a third side effect: I moved some attribute descriptions of
:class:`lino.core.model.Model`  (e.g. :attr:`allow_cascaded_copy
<lino.core.model.Model.allow_cascaded_copy>`) from the source code to a prosa
file. This was my first usage of the `:noindex:` option for the :rst:dir:`class`
directive.
